"use strict";

// Generated by Selenium IDE
const WebDriverFactory = require('./WebDriverFactory')
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')
const {spawn, execFile} = require('child_process')
const path = require('path')
const fs =require('fs');
const config = require("../config")

//const indefinitelyWaitTimeout = Number.MAX_SAFE_INTEGER;
const defaultWaitTimeout = Number.MAX_SAFE_INTEGER
const defaultDelayBeforeClickInMilliseconds = 2000
const defaultDelayAfterClickInMilliseconds = 100
const defaultLongWaitForElement = Number.MAX_SAFE_INTEGER

describe('deploy-image', function() {
  let driver
  let vars
  let studentName = config.name
  let imageStreamName = config.rocketchat.imageStream
  let toolsNamespace = config.namespace.tools
  let devNamespace = config.namespace.dev
  let _fn;
  before(async function() {
  })

  beforeEach(async function() {
    driver = await new WebDriverFactory().build()
    vars = {}
    this.ok=true;
    _fn = require('./_functions')(driver)
    await driver.manage().window().setRect({width:1200, height:800, x:0, y:0})
  })

  afterEach(async function() {
    //await driver.quit();
    if (!this.ok) this.test.error(new Error('something went wrong'));
  })

  it('Deleting existing RocketChat', async function() {
    console.log(`Deleting existing RocketChat deployment - app=rocketchat-${studentName}`)
    await new Promise((resolve, reject)=>{
      const proc = spawn('oc', ['-n', devNamespace, 'delete', 'all', '-l', `app=rocketchat-${studentName}`, '--ignore-not-found=true']);
      proc.on("exit", (code)=>{
        //if (code != 0){
        //  return reject(new Error(`'oc delete' failed with exit code ${code}`))
        //}
        resolve(code)
      })
    })
  })

  it('Deleting existing MongoDB', async function() {
    await new Promise((resolve, reject)=>{
      console.log(`Deleting existing MongoDB deployment - mongodb-${studentName}`)
      const cwd = `${path.resolve(__dirname, '../../../101-materials')}`
      const proc = spawn('bash', ['-c', `./deleteServiceInstanceByMongoDBInstanceName.sh '${devNamespace}' 'mongodb-${studentName}'`], {cwd:cwd});
      proc.on("exit", (code)=>{
        if (code != 0){
          return reject(new Error(`'deleteServiceInstanceByMongoDBInstanceName.sh' failed with exit code ${code}`))
        }
        resolve(code)
      })
    })
  })

  it.skip('build', async function() {
    await new Promise((resolve, reject)=>{
      const args= [`-n`,`${toolsNamespace}`,`new-build`,`https://github.com/BCDevOps/devops-platform-workshops-labs/`,`--context-dir=apps/rocketchat`,`--name=${imageStreamName}`];
      const proc = spawn('oc', args);
      proc.on("exit", (code)=>{
        if (code != 0){
          return reject(new Error(`'oc' failed with exit code ${code}`))
        }
        resolve(code)
      })
    })
  })

  it('oc tag', async function() {
    await new Promise((resolve, reject)=>{
      const args= [`-n`,`${toolsNamespace}`,`tag`,`${imageStreamName}:latest`, `${imageStreamName}:dev`];
      const proc = spawn('oc', args);
      proc.on("exit", (code)=>{
        if (code != 0){
          return reject(new Error(`'oc' failed with exit code ${code}`))
        }
        resolve(code)
      })
    })
  })
  it('login', async function() {
    //Wait for GitHub Login
    const narration=_fn.say("Let's start by going to GitHub and make sure we are logged in. If not you will need to enter your credentials")
    await driver.get("https://github.com/login")
    await driver.wait(until.elementLocated(By.css('div.header-nav-current-user > a.user-profile-link')), defaultWaitTimeout)
    await narration
  })

  it('open openshift web console', async function() {
    const narration=_fn.say("Let's go to the  OpenShift Web Console")
    //Wait for OpenShift Login
    await driver.get("https://console.pathfinder.gov.bc.ca:8443/console/catalog")
    await driver.wait(until.elementLocated(By.css('#user-dropdown > span.username.truncate.ng-binding')), defaultWaitTimeout)
    await narration
  })

  it.only('find dev project', async function() {
    await driver.get("https://console.pathfinder.gov.bc.ca:8443/console/catalog")
    //View All
    await _fn.say('Find our "dev" project by clicking on "View All"')
    .then(()=>{
      return driver.wait(until.elementLocated(By.css('body > div.container-pf-nav-pf-vertical > div > div > div > landing-page > div.landing > div.landing-side-bar > landingside > projects-summary > div > div.catalog-project-summary-list.ng-scope > div.projects-count > a')), defaultWaitTimeout)
      .then(_fn.pointAndClick)
    })
    
    // Search for the "Openshift 101"
    await _fn.say('Enter "OpenShift 1-0-1" in the search field')
    .then(()=>{
      return driver.wait(until.elementLocated(By.css('#search-projects')), defaultWaitTimeout)
      .then(_fn.pointAndType(`OpenShift 101 ${config.namespace.prefix}-`))
    })
    // Select the dev one
    await _fn.say('Select the "dev" one').then(()=>{
      return driver.wait(until.elementLocated(By.xpath(`//div[contains(@class, "list-pf-content-wrapper")]/div/div[contains(@class, project-name-item)]/h2/a[@title="OpenShift 101 (dev)" and substring(@href, string-length(@href)-${devNamespace.length -1}, ${devNamespace.length})="${devNamespace}"]`)), defaultWaitTimeout)
      .then(_fn.pointAndClick)
    })
  })

  it('filter overview', async function() {
    await Promise.resolve(true)
    //await _fn.say('We will filter the overview page to only show my application')
    //.then(()=>{
    //  return _fn.filterOverviewByName(`-${studentName}`);
    //})
  })

  it.only('deploy-rocketchat', async function() {
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    // Click on "Add to Project" > and "Deploy Image"
    await driver.wait(until.elementLocated(By.css(".dropdown-toggle > .hidden-xs:nth-child(2)")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.linkText("Deploy Image")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    //Wait for wizard form to show up
    await driver.wait(until.elementLocated(By.css(".wizard-pf-body")), defaultWaitTimeout).click()

    // Namespace
    await driver.wait(until.elementLocated(By.css(".form-group:nth-child(1) .ui-select-placeholder")), defaultWaitTimeout)
    .then(_fn.pointAndSelect(toolsNamespace))
     
    // ImageStream
    await driver.wait(until.elementLocated(By.css(".form-group:nth-child(2) .ui-select-placeholder")), defaultWaitTimeout)
    .then(_fn.pointAndSelect(imageStreamName))

    // ImageStream Tag
    await driver.wait(until.elementLocated(By.css(".form-group:nth-child(3) .ui-select-placeholder")), defaultWaitTimeout)
    .then(_fn.pointAndSelect("dev"))

    await driver.wait(until.elementLocated(By.id("name")), defaultWaitTimeout)
    .then((element)=>{return driver.executeScript("arguments[0].scrollIntoView()", element).then(()=>{return element})})
    .then(_fn.pointAndType(`rocketchat-${studentName}`))

    await driver.wait(until.elementLocated(By.id("nextButton")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.linkText("Continue to the project overview")), defaultWaitTimeout)
    .then(_fn.pointAndClick)
    
    await _fn.filterOverviewByName(`rocketchat-${studentName}`);

    // .project-bar

    await driver.wait(until.elementLocated(By.xpath(`//div[contains(@class, "app-heading")]/h2[span="rocketchat-${studentName}"]/parent::div/following-sibling::div/descendant::div[@class="list-pf-chevron"]/descendant::a/span/span`)), defaultWaitTimeout)
    .then(async (element)=>{
      let clazz=await element.getAttribute("class")
      if (clazz.includes("fa-angle-down")){
        return element;
      }
      return _fn.pointAndClick(element)
    })
  })

  it('monitor-rocketchat-deployment', async function() {
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    await _fn.filterOverviewByName(`${studentName}`)

    await driver.wait(until.elementLocated(By.xpath(`//overview-list-row/div/div/div[contains(@class, "list-pf-content")]/div[contains(@class, "list-pf-name")]/h3/a[contains(@href, "/browse/dc/rocketchat-${studentName}")]`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.css("span.latest-status > a > span")), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//pod-donut/div/*[1]/*[2]/*[5]/*[4]/*[1]/*[1][. = "1"]/ancestor::pod-donut`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//breadcrumbs/ol/li[1]/a[. = "Pods"]`)), defaultLongWaitForElement)
    await driver.wait(until.elementLocated(By.linkText("Events")), defaultLongWaitForElement).click()
    await driver.wait(until.elementLocated(By.xpath("//events/div/table/tbody/tr/td[@data-title=\"Reason\" and span =\"Started\"]")), defaultLongWaitForElement)
    .then(_fn.pointHere)
    .then(_fn.clearPointer)

    await driver.wait(until.elementLocated(By.linkText("Logs")), defaultLongWaitForElement).click()


    await driver.wait(until.elementLocated(By.xpath('//span[contains(@class, "container-state")]/span[. = "Crash loop back off"]')), defaultLongWaitForElement)
    .then(_fn.pointHere)

    await driver.wait(until.elementLocated(By.xpath('//log-viewer/div[2]/div/div[2]/table/tbody/tr[@class="log-line"]/td[@class="log-line-text"][contains(., "MongoError: failed to connect to server [mongo:27017] on first connect [MongoError: getaddrinfo ENOTFOUND mongo mongo:27017]")]')), defaultLongWaitForElement)
    .then(_fn.pointHereToo)
  })

  it('deploy-mongodb', async function() {
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    await driver.wait(until.elementLocated(By.id("search-input")), defaultWaitTimeout)
    .then((element)=>{return element.click().then(()=>{return element})})
    .then((element)=>{return element.sendKeys("mongodb ephemeral").then(()=>{return element})})
    .then((element)=>{
      return element.getAttribute("aria-owns")
    })
    .then((dropDownID)=>{
      return driver.wait(until.elementLocated(By.css(`#${dropDownID}-option-0 .catalog-search-match-label`)), defaultWaitTimeout)
      .then(element=>{
        return element.click();
      })
    })

    await driver.wait(until.elementLocated(By.id("nextButton")), defaultWaitTimeout).then((element)=>{return element.click()})
    
    await driver.wait(until.elementLocated(By.id("DATABASE_SERVICE_NAME")), defaultWaitTimeout)
    .then(_fn.pointAndType(`mongodb-${studentName}`))

    await driver.wait(until.elementLocated(By.id("MONGODB_USER")), defaultWaitTimeout)
    .then(_fn.pointAndType(`dbuser`))

    await driver.wait(until.elementLocated(By.id("MONGODB_PASSWORD")), defaultWaitTimeout)
    .then(_fn.pointAndType(`dbpass`))

    await driver.wait(until.elementLocated(By.id("MONGODB_DATABASE")), defaultWaitTimeout)
    .then(_fn.pointAndType(`rocketchat`))

    await driver.wait(until.elementLocated(By.id("MONGODB_VERSION")), defaultWaitTimeout)
    .then(_fn.pointAndType(`2.6`))

    await driver.wait(until.elementLocated(By.id("nextButton")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.css(".bind-choice:nth-child(3)")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.id("nextButton")), defaultWaitTimeout)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.linkText("Continue to the project overview")), defaultLongWaitForElement)
    .then(_fn.pointAndClick)
    await _fn.filterOverviewByName(`${studentName}`)
  })

  it('monitor-rocketchat-deployment', async function() {
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    await _fn.filterOverviewByName(`${studentName}`)

    await driver.wait(until.elementLocated(By.xpath(`//overview-list-row/div/div/div[contains(@class, "list-pf-content")]/div[contains(@class, "list-pf-name")]/h3/a[contains(@href, "/browse/dc/mongodb-${studentName}")]`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.css("span.latest-status > a > span")), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//pod-donut/div/*[1]/*[2]/*[5]/*[4]/*[1]/*[1][. = "1"]/ancestor::pod-donut`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//breadcrumbs/ol/li[1]/a[. = "Pods"]`)), defaultLongWaitForElement)
    await driver.wait(until.elementLocated(By.linkText("Events")), defaultLongWaitForElement).click()
    await driver.wait(until.elementLocated(By.xpath("//events/div/table/tbody/tr/td[@data-title=\"Reason\" and span =\"Started\"]")), defaultLongWaitForElement)
    .then(_fn.pointHere)
    .then(_fn.clearPointer)

    await driver.wait(until.elementLocated(By.linkText("Logs")), defaultLongWaitForElement).click()

    await driver.wait(until.elementLocated(By.xpath('//log-viewer/div[2]/div/div[2]/table/tbody/tr[@class="log-line"]/td[@class="log-line-text"][contains(., "authenticate db: rocketchat")][1]')), defaultLongWaitForElement)
    .then(_fn.pointHere)

    await driver.wait(until.elementLocated(By.xpath('//span[contains(@class, "container-state")]/span[. = "Running"]')), defaultLongWaitForElement)
    .then(_fn.pointHere)
  })

  it('Connect RocketChat to MongoDB', async function() {
    this.timeout(120000)
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    await _fn.filterOverviewByName(`${studentName}`)
    
    await driver.wait(until.elementLocated(By.xpath(`//div[contains(@class,"list-pf-item")]/descendant::div[contains(@class,"list-pf-name")]/h3/a[. = "rocketchat-${studentName}"]`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//breadcrumbs/ol/li[1]/a[. = "Deployments"]`)), defaultLongWaitForElement)
    .then(_fn.pointAndWait)

    let lastReplicationControllerNumber = await driver.wait(until.elementLocated(By.css("span.latest-status > a > span")), defaultLongWaitForElement).then((element)=>{return element.getText()}).then((text)=>{return text.substring(1)})
    await driver.findElement(By.linkText("Environment")).click()
    await driver.findElement(By.id("key-value-editor-key-1000-0"))    .then((element)=> {return element.click().then(()=>{return element})})
    .then(_fn.pointAndType("MONGO_URL"))

    await driver.findElement(By.id("key-value-editor-value-1000-0"))
    .then(_fn.pointAndType(`mongodb://dbuser:dbpass@mongodb-${studentName}:27017/rocketchat`))


    await driver.findElement(By.css("edit-environment-variables > form > div.gutter-top-bottom > button")).click()
    await driver.findElement(By.linkText("History")).click()
    await driver.wait(until.elementLocated(By.xpath(`//span[contains(@class,"latest-status")]/a[. = "#${parseInt(lastReplicationControllerNumber)+1}"]`)), defaultLongWaitForElement)
    .catch(()=>{return true})

    
    await driver.findElement(By.css("span.latest-status > a"))
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath(`//pod-donut/div/*[1]/*[2]/*[5]/*[4]/*[1]/*[1][. = "1"]/ancestor::pod-donut`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)
    
    await driver.wait(until.elementLocated(By.xpath(`//breadcrumbs/ol/li[1]/a[. = "Pods"]`)), defaultLongWaitForElement)
    .then(_fn.pointAndWait)

    //Is container Ready?
    await driver.wait(until.elementLocated(By.xpath(`//uib-tab-heading[. = "Details"]/parent::*`)), defaultLongWaitForElement)
    .then(_fn.pointAndClick)
    .then(()=>{
      return driver.wait(until.elementLocated(By.xpath('//container-statuses/div/h4/parent::*/dl/dt[. = "Ready:"]/following-sibling::*[contains(., "true")]')), defaultLongWaitForElement)
    })
    .then(_fn.pointAndWait)
    .catch(()=>{
      return driver.wait(until.elementLocated(By.linkText("Events")), defaultLongWaitForElement)
      .then(_fn.pointAndClick)
      .then(()=>{
        return driver.wait(until.elementLocated(By.xpath("//events/div/table/tbody/tr/td[@data-title=\"Reason\" and span =\"Started\"]")), defaultLongWaitForElement)
        .then(_fn.pointAndWait)
      })
    })

    await driver.wait(until.elementLocated(By.linkText("Logs")), defaultLongWaitForElement)
    .then(_fn.pointAndClick)

    await driver.wait(until.elementLocated(By.xpath("//log-viewer/div[2]/div/div[2]/table/tbody/tr[@class=\"log-line\"]/td[@class=\"log-line-text\"]/span[2][. =\"|                SERVER RUNNING                |\"]")), defaultLongWaitForElement)
    .then(_fn.pointHere)
    .then(()=>{return delay(defaultDelayAfterClickInMilliseconds)})

    await driver.wait(until.elementLocated(By.xpath('//span[contains(@class, "container-state")]/span[. = "Running"]')), defaultLongWaitForElement)
    .then(_fn.pointHereToo)
  })
  it('re-play', async function() {
    await driver.get(`https://console.pathfinder.gov.bc.ca:8443/console/project/${devNamespace}/overview`)
    await _fn.filterOverviewByName(`${studentName}`)
    const time = new Date();
    try {
      fs.utimesSync(__filename, time, time);
    } catch (err) {
      fs.closeSync(fs.openSync(__filename, 'w'));
    }
  })
})
